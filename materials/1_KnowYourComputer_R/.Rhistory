df <- as.data.frame(matrix(nrow = 3, ncol =3))
colnames(df) <- c("lat", "lon", "id")
df$lon <- c(-51.2798, -51.3558, -51.9)
df$lat <- c( -59.6387,  -59.7533, -59.4)
df$id <- c("1", "2", "3")
mapImageData <- get_map(location = "Falkland Islands",
source = "google",  zoom = 9)
?register_google
register_google(key = "AIzaSyB2-pGN-q2EKa28_KbxeZmiUe9wS_QNzpQ")
mapImageData <- get_map(location = "Falkland Islands",
source = "google",  zoom = 9)
mapImageData <- get_map()
map <- get_map(c(-97.14667, 31.5493))
install.packages("XML")
a=1
b=2
a+b
a="my text"
b="my other text"
a+b
paste(a,b, sep = "AND")
paste(a,b, sep = " AND ")
paste(a,b, sep = " _AND_ ")
gsub(pattern = "t", replacement = "T", x = a)
library(irr)
library(withr)
library(stringr)
library(cld2)      # For automatic language recognition (extract English reviews)
library(svMisc)
install.packages("cld2")
library(cld2)      # For automatic language recognition (extract English reviews)
library(magrittr)     # Required to use the pipes %>%
library(rvest)        # Required for read_html
library(RSelenium)    # Required for webscraping with javascript
library(stringi)      # For playing with url strings
library(cld3)       # to recognize language
library(wordcloud)
library(tidyverse)
library(reshape2)
library(XML)
options(warn=-1)
data <- xmlParse("Downloads/literatur-nur-texte-2/12-publication/Literatur-Abraham-a-Sancta-Clara.xml")
data
class(data)
namespace <- c(TEI="http://www.tei-c.org/ns/1.0")
my_tag <- "//TEI:body"
my_result <- xpathSApply(doc = data, path = my_tag, fun = xmlValue, namespaces = namespace)
my_tag <- "//TEI:text"
my_result <- xpathSApply(doc = data, path = my_tag, fun = xmlValue, namespaces = namespace)
my_result[1]
data <- xmlParse("Downloads/literatur-nur-texte-2/12-publication/Literatur-Kleist,-Heinrich-von.xml")
class(data)
namespace <- c(TEI="http://www.tei-c.org/ns/1.0")
my_tag <- "//TEI:text"
my_result <- xpathSApply(doc = data, path = my_tag, fun = xmlValue, namespaces = namespace)
my_result[1]
my_result <- xpathSApply(doc = data, path = my_tag, fun = xmlChildren, namespaces = namespace)
my_result[1]
my_result_2 <- xpathSApply(doc = my_result[[1]], path = my_tag, fun = xmlChildren, namespaces = namespace)
xpathSApply(doc = data,
file = "//text//p",
fun = xmlAttrs)
xpathSApply(doc = data,
path = "//TEI:text//TEI:p",
fun = xmlAttrs)
xpathSApply(doc = data,
path = "//TEI:text//TEI:p",
fun = xmlChildren)
xpathSApply(doc = data,
path = my_tag,
fun = xmlChildren)
my_tag <- "//TEI:text"
my_result <- xpathSApply(doc = data, path = my_tag, fun = xmlChildren, namespaces = namespace)
data <- xmlTreeParse("Downloads/literatur-nur-texte-2/12-publication/Literatur-Kleist,-Heinrich-von.xml")
class(data)
length(data$doc$children)
passages <- xmlElementsByTagName(data$doc$children[[1]], "text", recursive = T)
passages[[1]]
passages[[2]]
passages[[3]]
data <- xmlTreeParse("Downloads/literatur-nur-texte-2/12-publication/Literatur-Kleist,-Heinrich-von.xml")
passages <- xmlElementsByTagName(data$doc$children[[1]], "text", recursive = T)
passages[[3]]
data <- xmlTreeParse("Downloads/literatur-nur-texte-2/12-publication/Literatur-Kleist,-Heinrich-von.xml")
passages <- xmlElementsByTagName(data$doc$children[[1]], "//TEI:text", recursive = T)
class(data)
passages <- xmlElementsByTagName(data$doc$children[[1]], "body", recursive = T)
passages[[1]]
xmlElementSummary(data$doc$children[[1]])
xmlElementSummary("Downloads/literatur-nur-texte-2/12-publication/Literatur-Kleist,-Heinrich-von.xml")
library(rvest)
my_file <- "Downloads/literatur-nur-texte-2/12-publication/Literatur-Kleist,-Heinrich-von.xml"
xmlElementSummary(my_file)
doc <- read_xml(my_file)
titles <- doc %>% html_nodes(".title") %>% html_text()
titles
titles <- doc %>% xml_nodes(".title") %>% xml_text()
titles
doc
titles <- doc %>% xml_nodes(".teiCorpus") %>% xml_text()
doc <- read_xml(my_file)
titles <- doc %>% xml_nodes(".teiCorpus")
library(magrittr)
titles <- doc %>% xml_nodes(".teiCorpus")
titles <- doc %>% xml_nodes(xpath = "//body")
titles <- doc[2] %>% xml_nodes(xpath = "//body")
titles <- doc[[2]] %>% xml_nodes(xpath = "//body")
doc <- read_html(my_file)
titles <- doc %>% xml_nodes(xpath = "//body")
titles <- doc %>% xml_nodes(xpath = "//body") %>% xml_text()
titles2 <- titles %>% xml_nodes(xpath = "//l")
titles <- doc %>% xml_nodes(xpath = "//body//l")
my_lines <- xmlElementsByTagName(passages[[1]], "l", recursive = T)
passages[[1]]
my_lines <- xmlElementsByTagName(passages[[1]], "p", recursive = T)
my_lines[[1]]
my_lines <- xmlElementsByTagName(passages[[1]], ".", recursive = T)
my_lines <- xmlElementsByTagName(passages[[1]], "", recursive = T)
passages <- xmlElementsByTagName(data$doc$children[[1]], "TEI", recursive = T)
passages[[1]]
bodies <- lapply(passages, function(x) xmlElementsByTagName(x, "body", recursive = T))
bodies[[1]]
bodies[[1]]
length(bodies)
lapply(bodies, length)
bodies[[2]]
my_lines <- lapply(bodies, function(x) xmlElementsByTagName(x, "l", recursive = T))
my_lines <- lapply(bodies, function(x) xmlElementsByTagName(x[[1]], "l", recursive = T))
my_lines[[1]]
lapply(lines, length)
lapply(my_lines, length)
my_lines[[2]]
my_paragraphs <- lapply(bodies, function(x) xmlElementsByTagName(x[[1]], "p", recursive = T))
my_paragraphs[[1]]
which(unlist(lapply(my_lines, length)) == 0)
which(unlist(lapply(my_lines, length)) != 0)
length(which(unlist(lapply(my_lines, length)) != 0))
which(unlist(lapply(my_paragraphs, length)) != 0)
length(which(unlist(lapply(my_paragraphs, length)) != 0))
passages_with_p <- which(unlist(lapply(my_lines, length)) != 0)
passages_with_p
length(passages_with_p)
passages_with_p <- which(unlist(lapply(my_paragraphs, length)) != 0)
passages_with_p
length(passages_with_p)
passages_with_l <- which(unlist(lapply(my_lines, length)) != 0)
passages_with_l
length(passages_with_l)
passages_with_p <- which(unlist(lapply(my_paragraphs, length)) != 0)
passages_with_p
length(passages_with_p)
duplicated(c(passages_with_l, passages_with_p))
passages_with_lANDp <- c(passages_with_l, passages_with_p)
which(duplicated(passages_with_lANDp))
lANDp <- which(duplicated(passages_with_lANDp))-length(my_lines)
lANDp
length(my_lines)
duplicated(c(passages_with_l, passages_with_p))
c(passages_with_l, passages_with_p)[which(duplicated(c(passages_with_l, passages_with_p)))]
passages_with_something <- unique(c(passages_with_l,passages_with_p))
length(passages_with_something)
passages_with_both <- c(passages_with_l, passages_with_p)[which(duplicated(c(passages_with_l, passages_with_p)))]
passages_with_both
passages_with_both[1]
bodies[[passages_with_both[1]]]
my_paragraphs[[passages_with_both[1]]]
my_lines[[passages_with_both[1]]]
my_lines_text <- lapply(my_lines, xmlValue)
my_lines_text <- lapply(my_lines, function(x) xmlValue(x[[1]]))
my_lines[[2]]
my_lines_text <- lapply(my_lines[[1]], xmlValue)
my_lines_text
my_lines_text <- lapply(my_lines[[2]], xmlValue)
my_lines_text
for(i in 1:length(passages)){
my_lines_text[i] <- unlist(lapply(my_lines[[i]], xmlValue))
my_paragraphs_text[i] <- unlist(lapply(my_paragraphs[[i]], xmlValue))
print(i)
}
my_lines_text <- character()
my_paragraphs_text <- character()
for(i in 1:length(passages)){
my_lines_text[i] <- unlist(lapply(my_lines[[i]], xmlValue))
my_paragraphs_text[i] <- unlist(lapply(my_paragraphs[[i]], xmlValue))
print(i)
}
unlist(lapply(my_lines[[i]], xmlValue))
lapply(my_lines[[i]], xmlValue)
my_lines_text <- character()
my_paragraphs_text <- character()
for(i in 1:length(passages)){
my_lines_tmp <- unlist(lapply(my_lines[[i]], xmlValue))
if(!is.null(my_lines_tmp))
my_lines_text[i] <- my_lines_tmp
my_paragraph_tmp <- unlist(lapply(my_paragraphs[[i]], xmlValue))
if(!is.null(my_paragraph_tmp))
my_paragraphs_text[i] <- my_paragraph_tmp
print(i)
}
my_lines_text <- list()
my_paragraphs_text <- list()
for(i in 1:length(passages)){
my_lines_tmp <- unlist(lapply(my_lines[[i]], xmlValue))
if(!is.null(my_lines_tmp))
my_lines_text[[i]] <- my_lines_tmp
my_paragraph_tmp <- unlist(lapply(my_paragraphs[[i]], xmlValue))
if(!is.null(my_paragraph_tmp))
my_paragraphs_text[[i]] <- my_paragraph_tmp
print(i)
}
my_lines_text
my_paragraphs_text
full_passages_text <- list()
for(i in 1:length(passages)){
full_passages_text[[i]] <- c(my_paragraphs[[i]],my_lines[[i]])
}
full_passages_text[[2]]
full_passages_text <- list()
for(i in 1:length(passages)){
full_passages_text[[i]] <- c(my_paragraphs_text[[i]],my_lines_text[[i]])
}
my_lines_text <- list()
my_paragraphs_text <- list()
for(i in 1:length(passages)){
my_lines_tmp <- unlist(lapply(my_lines[[i]], xmlValue))
if(!is.null(my_lines_tmp))
my_lines_text[[i]] <- my_lines_tmp
else
my_lines_text[[i]] <- NA
my_paragraph_tmp <- unlist(lapply(my_paragraphs[[i]], xmlValue))
if(!is.null(my_paragraph_tmp))
my_paragraphs_text[[i]] <- my_paragraph_tmp
else
my_paragraphs_text[[i]] <- NA
print(i)
}
full_passages_text <- list()
for(i in 1:length(passages)){
full_passages_text[[i]] <- c(my_paragraphs_text[[i]],my_lines_text[[i]])
}
full_passages_text[[2]]
sample_text <- paste(full_passages_text[[2]], collapse = " ")
sample_text
sample_text <- unlist(strsplit(sample_text, "\\W"))
sample_text
sample_text <- sample_text[-which(sample_text == "")]
sample_text
table(sample_text)
sort(table(sample_text), decreasing = T)
sample_text <- full_passages_text[[2]]
sample_text <- paste(sample_text, collapse = " ")
sample_text <- tolower(sample_text)
sample_text <- unlist(strsplit(sample_text, "\\W"))
sample_text <- sample_text[-which(sample_text == "")]
sort(table(sample_text), decreasing = T)
library(XML)
options(warn=-1)
my_file <- "Downloads/literatur-nur-texte-2/12-publication/Literatur-Kleist,-Heinrich-von.xml"
library(xml2)
xml_structure(data)
xml_structure(my_file)
xml_structure(read_xml(my_file))
xml_structure(read_xml(my_file))[1:10]
head(xml_structure(read_xml(my_file)))
passages <- xmlElementsByTagName(data$doc$children[[1]], "TEI", recursive = T)
xmlElementSummary(my_file)
data <- xmlTreeParse(my_file) # using tree parse
passages <- xmlElementsByTagName(data$doc$children[[1]], "TEI", recursive = T)
passages[[1]]
mainCorpus <- xmlElementsByTagName(data$doc$children[[1]], "teiCorpus")
length(mainCorpus)
length(passages)
passages <- xmlElementsByTagName(data$doc$children[[1]], "TEI", recursive = T)
subCorpora <- xmlElementsByTagName(mainCorpus, "teiCorpus")
subCorpora <- xmlElementsByTagName(mainCorpus[[1]], "teiCorpus")
lapply(subCorpora, function(x) xmlGetAttr(x, "n"))
Erzählprosa <- subCorpora[[3]]
Erzählprosa_subgenres <- xmlElementsByTagName(Erzählprosa[[1]], "teiCorpus")
Erzählprosa_subgenres <- xmlElementsByTagName(Erzählprosa, "teiCorpus")
lapply(Erzählprosa_subgenres, function(x) xmlGetAttr(x, "n"))
passages <- xmlElementsByTagName(Erzählungen, "TEI", recursive = T)
Erzählungen <- Erzählprosa_subgenres[[1]]
passages <- xmlElementsByTagName(Erzählungen, "TEI", recursive = T)
passages[[1]]
bodies <- lapply(passages, function(x) xmlElementsByTagName(x, "body", recursive = T))
bodies[[1]]
length(bodies)
lapply(bodies, length)
xmlValue(bodies[[1]])
bodies <- unlist(lapply(passages, function(x) xmlElementsByTagName(x, "body", recursive = T)))
bodies[[1]]
bodies <- lapply(passages, function(x) xmlElementsByTagName(x, "body", recursive = T))
bodies[[1]]
class(bodies[[1]])
class(bodies[[1]][[1]])
all_texts <- lapply(bodies, xmlValue)
bodies[[2]]
bodies[[2]][[1]]
bodies[[2]][[2]]
all_texts <- lapply(bodies, function(x) xmlValue(x[[1]]))
all_texts <- unlist(lapply(bodies, function(x) xmlValue(x[[1]])))
all_texts[1]
substr(all_texts[1], 1:100)
substr(all_texts[1], 1, 100)
library(stylo)
all_texts <- unlist(lapply(bodies, function(x) delete.markup(x[[1]])))
all_texts <- unlist(lapply(bodies, function(x) delete.markup(as.character(x[[1]]))))
all_texts[4]
all_texts[6]
all_texts[8]
bodies[[4]]
delete.markup(bodies[[4]])
delete.markup(bodies[[4]], markup.type = "XML")
delete.markup(bodies[[4]], markup.type = "xml")
dd = delete.markup(bodies[[4]], markup.type = "xml")
class(dd)
class(dd$text.body)
dd$text.body
dd = delete.markup(bodies[[4]][[1]], markup.type = "xml")
bodies[[4]][[1]]
dd = delete.markup(as.character(bodies[[4]][[1]]), markup.type = "xml")
dd$text.body
dd
xml_text(bodies[[4]][[1]])
xml_text(bodies[[4]])
xmlChildren(bodies[[4]])
xmlChildren(bodies[[4]][[1]])
dd = xmlChildren(bodies[[4]][[1]])
length(dd)
dd = xmlChildren(bodies[[4]][[1]], recursive = T)
length(dd)
dd = xmlToList(bodies[[4]][[1]], recursive = T)
dd = xmlToList(bodies[[4]][[1]])
length(dd)
View(dd)
dd[[1]]
dd[[2]]
dd[[2]]$text
dd[[2]]
dd[[3]]
View(dd)
library(rvest)
html_text_collapse <- function(x, trim = FALSE, collapse = " "){
UseMethod("html_text_collapse")
}
html_text_collapse.xml_nodeset <- function(x, trim = FALSE, collapse = " "){
vapply(x, html_text_collapse.xml_node, character(1), trim = trim, collapse = collapse)
}
html_text_collapse.xml_node <- function(x, trim = FALSE, collapse = " "){
paste(xml2::xml_find_all(x, ".//text()"), collapse = collapse)
}
html_text_collapse(bodies[[4]][[1]])
html_text_collapse(as.character(bodies[[4]][[1]]))
cleanFun <- function(xmlString) {
return(gsub("<.*?>", " ", xmlString))
}
dd <- cleanFun(as.character(bodies[[4]][[1]]))
dd
all_texts[1] <- cleanFun(as.character(bodies[[1]][[1]]))
substr(all_texts[1], 1, 100)
all_texts <- cleanFun(as.character(bodies[[1]][[1]]))
all_texts <- cleanFun(bodies[[1]][[1]])
substr(all_texts[1], 1, 100)
bodies[[1]][[1]]
my_paragraphs <- lapply(bodies, function(x) xmlElementsByTagName(x[[1]], "p", recursive = T))
my_paragraphs[[1]]
my_paragraphs_text <- list()
for(i in 1:length(passages)){
my_paragraph_tmp <- unlist(lapply(my_paragraphs[[i]], xmlValue))
if(!is.null(my_paragraph_tmp))
my_paragraphs_text[[i]] <- my_paragraph_tmp
else
print("error")
print(i)
}
sample_text <- full_passages_text[[2]]
sample_text <- my_paragraphs_text[[2]]
library(XML)
options(warn=-1)
my_file <- "Downloads/literatur-nur-texte-2/12-publication/Literatur-Kleist,-Heinrich-von.xml"
xmlElementSummary(my_file)
data <- xmlTreeParse(my_file) # using tree parse
mainCorpus <- xmlElementsByTagName(data$doc$children[[1]], "teiCorpus")
subCorpora <- xmlElementsByTagName(mainCorpus[[1]], "teiCorpus")
lapply(subCorpora, function(x) xmlGetAttr(x, "n"))
Erzählprosa <- subCorpora[[3]]
Erzählprosa_subgenres <- xmlElementsByTagName(Erzählprosa, "teiCorpus")
lapply(Erzählprosa_subgenres, function(x) xmlGetAttr(x, "n"))
Erzählungen <- Erzählprosa_subgenres[[1]]
my_texts <- xmlElementsByTagName(Erzählungen, "TEI", recursive = T)
my_texts[[1]]
bodies <- lapply(my_texts, function(x) xmlElementsByTagName(x, "body", recursive = T))
bodies[[1]]
all_texts <- unlist(lapply(bodies, function(x) xmlValue(x[[1]])))
all_texts[1]
substr(all_texts[1], 1, 100)
my_paragraphs <- lapply(bodies, function(x) xmlElementsByTagName(x[[1]], "p", recursive = T))
my_paragraphs[[1]]
my_paragraphs_text <- list()
for(i in 1:length(my_paragraphs)){
my_paragraphs_text[[i]] <- unlist(lapply(my_paragraphs[[i]], xmlValue))
print(i)
}
sample_text <- my_paragraphs_text[[2]]
sample_text <- my_paragraphs_text[[1]]
sample_text <- paste(sample_text, collapse = " ")
sample_text <- tolower(sample_text)
sample_text <- unlist(strsplit(sample_text, "\\W"))
sample_text <- sample_text[-which(sample_text == "")]
sort(table(sample_text), decreasing = T)
### This file contains some commands for a short "demo" of the XML package in R
### To run each command on your console, simply place the cursor on it
### and press Crtl + Enter
### Let's call the Package "XML"
library(XML)
### It might produce some warnings, so better get rid of them
options(warn=-1)
### First thing: choose an XML file, and parse it
my_file <- "Downloads/literatur-nur-texte-2/12-publication/Literatur-Kleist,-Heinrich-von.xml"
### see a summary of the tags
xmlElementSummary(my_file)
### save the content into the variable data
data <- xmlTreeParse(my_file) # using tree parse
### find the main "teiCorpus"
mainCorpus <- xmlElementsByTagName(data$doc$children[[1]], "teiCorpus")
### find the sub-corpora (per genre)
subCorpora <- xmlElementsByTagName(mainCorpus[[1]], "teiCorpus")
# see the titles of the sub-corpora
lapply(subCorpora, function(x) xmlGetAttr(x, "n"))
### let's find "Erzählprosa/Erzählungen"
Erzählprosa <- subCorpora[[3]]
# find the sub-genres
Erzählprosa_subgenres <- xmlElementsByTagName(Erzählprosa, "teiCorpus")
# see the titles of the sub-genres
lapply(Erzählprosa_subgenres, function(x) xmlGetAttr(x, "n"))
### Anekdoten und Kurzgeschichten might be interesting, but let's focus on the Erzählungen
Erzählungen <- Erzählprosa_subgenres[[1]]
### now we can find all texts under the subgenre
my_texts <- xmlElementsByTagName(Erzählungen, "TEI", recursive = T)
# see the first identified passage
my_texts[[1]]
### for each passage, there is a metadata section and the actual text (enclosed by the "body" tag)
bodies <- lapply(my_texts, function(x) xmlElementsByTagName(x, "body", recursive = T))
bodies[[1]]
### easy way to extract the text
all_texts <- unlist(lapply(bodies, function(x) xmlValue(x[[1]])))
# however, this genrates errors. See here:
substr(all_texts[1], 1, 100)
# some words are squeezed together...
### better to extract the text paragraph by paragraph
my_paragraphs <- lapply(bodies, function(x) xmlElementsByTagName(x[[1]], "p", recursive = T))
### once isolated all paragraphs, we can extract the text from the XML
my_paragraphs_text <- list()
for(i in 1:length(my_paragraphs)){
my_paragraphs_text[[i]] <- unlist(lapply(my_paragraphs[[i]], xmlValue))
print(i)
}
# I still have to check, but it seems to work!
### Some basic stats (most frequent words)
sample_text <- my_paragraphs_text[[1]]
sample_text <- paste(sample_text, collapse = " ")
sample_text <- tolower(sample_text)
sample_text <- unlist(strsplit(sample_text, "\\W"))
sample_text <- sample_text[-which(sample_text == "")]
sort(table(sample_text), decreasing = T)
my_texts <- unlist(lapply(my_paragraphs_text, function(x) paste(x, collapse = " ")))
mon_texte <- scan(file = "Sur la lecture - Marcel Proust.txt", what = character())
mon_texte <- scan(file = "Sur la lecture - Marcel Proust.txt", what = character(), sep = "")
mon_texte <- scan(file = "Sur la lecture - Marcel Proust.txt", what = character(), sep = "\n")
mon_texte <- scan(file = "Sur la lecture - Marcel Proust.txt", what = character(), sep = "asfnampsfa")
mon_texte <- readLines("Sur la lecture - Marcel Proust.txt")
mon_texte[1:2]
mon_texte[1:5]
lignes_vides <- which(mon_texte == "")
mon_texte <- mon_texte[-lignes_vides]
mon_texte <- strsplit(mon_texte, "\\W")
mon_texte <- unlist(mon_texte)
espaces_blancs <- which(mon_texte == "")
mon_texte <- mon_texte[-espaces_blancs]
for(mot in mon_texte){
if(mot == "goût")
nombre_de_gout <- nombre_de_gout+1
}
nombre_de_gout <- 0
for(mot in mon_texte){
if(mot == "goût")
nombre_de_gout <- nombre_de_gout+1
}
nombre_de_gout
class(mon_texte)
mon_texte <- readLines("Sur la lecture - Marcel Proust.txt")
mon_texte[1:5]
lignes_vides <- which(mon_texte == "")
mon_texte <- mon_texte[-lignes_vides]
mon_texte <- strsplit(x = mon_texte, split = "\\W")
class(mon_texte)
mon_texte[1:2]
mon_texte[1:3]
mon_texte <- unlist(mon_texte)
espaces_blancs <- which(mon_texte == "")
mon_texte <- mon_texte[-espaces_blancs]
nombre_de_gout <- 0
for(mot in mon_texte){
# si le mot est goût
if(mot == "goût"){
# nous augmentons le compteur d'un
nombre_de_gout <- nombre_de_gout+1
}
}
nombre_de_gout
setwd("~/EnExDi2020/materials/1_KnowYourComputer_R")
mon_texte <- readLines("Sur la lecture - Marcel Proust.txt")
